MAP METAMODEL_CLASSES
END_MAP

PROCEDURE VISIT_CLASS ! [s buffer][]

   => LOCAL.BUFFER
   
   MAPCREATE => LOCAL.CLASS

   IF LOCAL.BUFFER '2.4' LOC SWAP POP IS_NOT_NULL THEN
      '2.4' => LOCAL.CLASS.VERSION
   ELSE
      '2.3' => LOCAL.CLASS.VERSION
   END_IF

   ! struct DocText : public MMObject {
   LOCAL.BUFFER
      EXTRL POP
      EXTRL TRIM => LOCAL.CLASS.NAME
   TRIM => LOCAL.BUFFER
   IF LOCAL.BUFFER ':' STARTS_WITH THEN
      LOCAL.BUFFER
         EXTRL POP
         EXTRL POP
         EXTRL TRIM => LOCAL.CLASS.SUPER
         POP
   END_IF
   
   IF LOCAL.BUFFER 'ABSTRACT' LOC SWAP POP IS_NOT_NULL THEN
      TRUE => LOCAL.CLASS.ABSTRACT
   ELSE
      FALSE => LOCAL.CLASS.ABSTRACT
   END_IF
         
   MAPCREATE => LOCAL.CLASS.ATTRS
   WHILE VAR.F TEXTFILE.READLN DO
      DUP => LOCAL.BUFFER_ORG
      TRIM => LOCAL.BUFFER
      MAPCREATE => LOCAL.TYPE
      IF LOCAL.BUFFER '2.4' LOC SWAP POP IS_NOT_NULL THEN
         '2.4' => LOCAL.TYPE.VERSION
      ELSE
         '2.3' => LOCAL.TYPE.VERSION
      END_IF
      IF LOCAL.BUFFER = '};' THEN
         BREAK
      ELSIF LOCAL.BUFFER 'virtual' STARTS_WITH THEN
         CONTINUE
      ELSIF LOCAL.BUFFER 'list' STARTS_WITH THEN
         ! list<MetaAttribute *> MetaAttribute; // LIST
         'list' => LOCAL.TYPE.TYPE
         IF LOCAL.BUFFER 'LIST' LOC SWAP POP IS_NULL THEN
            CONTINUE
         END_IF
         LOCAL.BUFFER '<' LOC INC EXTRLN POP TRIM => LOCAL.BUFFER
         LOCAL.BUFFER
            EXTRL TRIM => LOCAL.TYPE.LIST_TYPE
            TRIM EXTRL POP
            TRIM ';' LOC EXTRLN1 => LOCAL.ATTR
         &LOCAL.CLASS.ATTRS LOCAL.ATTR &LOCAL.TYPE MAPINS
      ELSIF LOCAL.BUFFER '//' STARTS_WITH THEN
         CONTINUE
      ELSIF LOCAL.BUFFER 'bool is' STARTS_WITH THEN
         CONTINUE
      ELSIF LOCAL.BUFFER = 'public:' THEN
         CONTINUE
      ELSIF LOCAL.BUFFER = 'private:' THEN
         CONTINUE
      ELSIF LOCAL.BUFFER = '' THEN
         CONTINUE
      ELSIF LOCAL.BUFFER 'enum' STARTS_WITH THEN
         'enum' => LOCAL.TYPE.TYPE
         LOCAL.BUFFER '{' LOC INC EXTRLN POP TRIM => LOCAL.BUFFER
         LOCAL.BUFFER '}' LOC EXTRLN ' ' '' REPLACE_STRING => LOCAL.TYPE.VALUES
         1 EXTRLN POP EXTRL TRIM => LOCAL.ATTR
         POP
         IF LOCAL.ATTR ';' ENDS_WITH THEN
            LOCAL.ATTR 1 EXTRRN POP => LOCAL.ATTR
         END_IF
         &LOCAL.CLASS.ATTRS LOCAL.ATTR &LOCAL.TYPE MAPINS
         ICSCPU.ASSERT_STACK_EMPTY
      ELSE       
         LOCAL.BUFFER 
            EXTRL => LOCAL.TYPE.TYPE
            EXTRL => LOCAL.ATTR
            POP
         IF LOCAL.ATTR ';' ENDS_WITH THEN
            LOCAL.ATTR 1 EXTRRN POP => LOCAL.ATTR
         END_IF
         IF LOCAL.ATTR '*' STARTS_WITH THEN
            LOCAL.ATTR 1 EXTRLN POP => LOCAL.ATTR
            LOCAL.TYPE.TYPE . '*' => LOCAL.TYPE.TYPE
         END_IF
         IF LOCAL.ATTR ';' ENDS_WITH THEN
            LOCAL.ATTR 1 EXTRRN POP => LOCAL.ATTR
         END_IF
         &LOCAL.CLASS.ATTRS LOCAL.ATTR &LOCAL.TYPE MAPINS
      END_IF
      ICSCPU.ASSERT_STACK_EMPTY
   END_WHILE
   
   &METAMODEL_CLASSES LOCAL.CLASS.NAME &LOCAL.CLASS DUP SWAP POP MAPINS

END_PROCEDURE

PROCEDURE SCAN_METAMODEL
   '..\metamodel\MetaModel.h' TEXTFILE.OPEN POP => VAR.F
   WHILE VAR.F TEXTFILE.READLN DO
      => LOCAL.BUFFER
      LOCAL.BUFFER TRIM => LOCAL.TRIMMED_BUFFER
      ! class Constraint : public MetaElement { // ABSTRACT, 2.4
      IF LOCAL.TRIMMED_BUFFER 'class' STARTS_WITH
         LOCAL.TRIMMED_BUFFER '{' LOC SWAP POP IS_NOT_NULL AND
      THEN
         LOCAL.BUFFER VISIT_CLASS
      ELSIF LOCAL.TRIMMED_BUFFER 'struct' STARTS_WITH 
         LOCAL.TRIMMED_BUFFER '{' LOC SWAP POP IS_NOT_NULL AND
      THEN
         LOCAL.BUFFER VISIT_CLASS
      END_IF
   END_WHILE
   VAR.F TEXTFILE.CLOSE
END_PROCEDURE

PROCEDURE WRITE_STRING ! [s attr][]
   => LOCAL.ATTR
   DISPLAY '   xtf.writeTag("',LOCAL.ATTR,'", t->',LOCAL.ATTR,');'
END_PROCEDURE

PROCEDURE WRITE_INT ! [s attr][]
   => LOCAL.ATTR
   DISPLAY '   xtf.writeTag("',LOCAL.ATTR,'", to_string(t->',LOCAL.ATTR,'));'
END_PROCEDURE

PROCEDURE WRITE_DOUBLE ! [s attr][]
   => LOCAL.ATTR
   DISPLAY '   xtf.writeTag("',LOCAL.ATTR,'", to_string(t->',LOCAL.ATTR,'));'
END_PROCEDURE

PROCEDURE WRITE_CHAR ! [s attr][]
   => LOCAL.ATTR
   DISPLAY '   xtf.writeTag("',LOCAL.ATTR,'", to_string(t->',LOCAL.ATTR,'));'
END_PROCEDURE

PROCEDURE WRITE_BOOL ! [s attr][]
   => LOCAL.ATTR
   DISPLAY '   xtf.writeTag("',LOCAL.ATTR,'", to_string_bool(t->',LOCAL.ATTR,'));'
END_PROCEDURE

PROCEDURE WRITE_POINTER ! [s attr][]
   => LOCAL.ATTR
   DISPLAY '   xtf.writeReference("',LOCAL.ATTR,'", get_path(t->',LOCAL.ATTR,'));'
END_PROCEDURE

PROCEDURE WRITE_ENUM ! [s class,s attr,m type][]

   => LOCAL.TYPE
   => LOCAL.ATTR
   => LOCAL.CLASS

   DISPLAY '   switch (t->',LOCAL.ATTR,') {'
   
   LOCAL.TYPE.VALUES
   WHILE EXTRL RDUP IS_NOT_NULL DO
      => LOCAL.VALUE
      DISPLAY '      case ',LOCAL.CLASS,'::',LOCAL.VALUE,':'
      DISPLAY '         xtf.writeTag("',LOCAL.ATTR,'","',LOCAL.VALUE,'");'
      DISPLAY '         break;'
   END_WHILE POP POP

   DISPLAY '      default:'
   DISPLAY '         Log.error("unsupported ',LOCAL.CLASS,'.',LOCAL.ATTR,' value " + to_string(t->',LOCAL.ATTR,'));'
   DISPLAY '         break;'
   DISPLAY '   }'

END_PROCEDURE

PROCEDURE WRITE_LIST ! [s attr,m type][]

   => LOCAL.TYPE
   => LOCAL.ATTR

   DISPLAY '   if (t->',LOCAL.ATTR,'.size() > 0) {'
   DISPLAY '      xtf.openTag("',LOCAL.ATTR,'");'
   DISPLAY '      for (auto tt : t->',LOCAL.ATTR,') {'
   DISPLAY '         visit',LOCAL.TYPE.LIST_TYPE,'(tt);'
   DISPLAY '      }'
   DISPLAY '      xtf.closeTag();'
   DISPLAY '   }'

END_PROCEDURE

PROCEDURE WRITE_CLASS ! [m class][]

   => LOCAL.CLASS
   IF LOCAL.CLASS.NAME = 'MMObject' THEN
      RETURN
   ELSIF LOCAL.CLASS.NAME = 'RestrictedRef' THEN
      RETURN
   END_IF
   
   DISPLAY ''

   IF 'LOCAL.CLASS.SUPER' EXISTS THEN
      IF LOCAL.CLASS.SUPER <> 'MMObject' THEN
         DISPLAY '   visit',LOCAL.CLASS.SUPER,'(t);'
         DISPLAY ''
      END_IF
   END_IF

   &LOCAL.CLASS.ATTRS MAPRESET
   WHILE &LOCAL.CLASS.ATTRS MAPSCAN DO
      => LOCAL.ATTR
      => LOCAL.TYPE
      IF LOCAL.TYPE.VERSION = '2.4' THEN
         DISPLAY '   if (version == "2.4") {'
      END_IF
      IF LOCAL.ATTR '_' STARTS_WITH THEN
         CONTINUE
      ELSIF LOCAL.TYPE.TYPE = 'string' THEN
         LOCAL.ATTR WRITE_STRING
      ELSIF LOCAL.TYPE.TYPE = 'int' THEN
         LOCAL.ATTR WRITE_INT
      ELSIF LOCAL.TYPE.TYPE = 'double' THEN
         LOCAL.ATTR WRITE_DOUBLE
      ELSIF LOCAL.TYPE.TYPE = 'bool' THEN
         LOCAL.ATTR WRITE_BOOL
      ELSIF LOCAL.TYPE.TYPE = 'char' THEN
         LOCAL.ATTR WRITE_BOOL
      ELSIF LOCAL.TYPE.TYPE = 'enum' THEN
         LOCAL.CLASS.NAME LOCAL.ATTR &LOCAL.TYPE WRITE_ENUM
      ELSIF LOCAL.TYPE.TYPE = 'list' THEN
         LOCAL.ATTR &LOCAL.TYPE WRITE_LIST
      ELSIF LOCAL.TYPE.TYPE '*' ENDS_WITH THEN
         LOCAL.ATTR WRITE_POINTER
      ELSE
         DISPLAY '   xtf.openTag("',LOCAL.ATTR,'");'
         DISPLAY '   visit',LOCAL.TYPE.TYPE,'(t->',LOCAL.ATTR,');
         DISPLAY '   xtf.closeTag();'
      END_IF
      IF LOCAL.TYPE.VERSION = '2.4' THEN
         DISPLAY '   }'
      END_IF
   END_WHILE

END_PROCEDURE

PROCEDURE GEN_CLASS ! [m class][]

   => LOCAL.CLASS
   
   IF LOCAL.CLASS.ABSTRACT THEN
      DISPLAY 'void ImdOutput::visit',LOCAL.CLASS.NAME,'(',LOCAL.CLASS.NAME,' *t) // ABSTRACT'
      DISPLAY '{'
   ELSE
      DISPLAY 'void ImdOutput::visit',LOCAL.CLASS.NAME,'(',LOCAL.CLASS.NAME,' *t)'
      DISPLAY '{'
      DISPLAY ''
      DISPLAY '   xtf.openObject("IlisMeta07", "ModelData", "',LOCAL.CLASS.NAME,'", get_path(t));'
   END_IF

   &LOCAL.CLASS WRITE_CLASS

   IF LOCAL.CLASS.ABSTRACT NOT THEN
      DISPLAY ''
      DISPLAY '   xtf.closeObject();'
   END_IF

   DISPLAY ''
   DISPLAY '}'
   DISPLAY ''

END_PROCEDURE

PROCEDURE GEN_IMD
   &METAMODEL_CLASSES MAPRESET
   WHILE &METAMODEL_CLASSES MAPSCAN DO
      => LOCAL.NAME
      => LOCAL.CLASS
      IF LOCAL.NAME = 'MMObject' THEN
         CONTINUE
      ELSIF LOCAL.NAME = 'RestrictedRef' THEN
         CONTINUE
      END_IF
      ! IF LOCAL.NAME = 'NumType' THEN
         &LOCAL.CLASS GEN_CLASS
      ! END_IF
   END_WHILE
END_PROCEDURE

! main
SCAN_METAMODEL
GEN_IMD