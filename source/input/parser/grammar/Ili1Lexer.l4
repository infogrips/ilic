//
// start of LEXER
//

lexer grammar Ili1Lexer;

//
// whitespace & comments
//

WS
   : (' ' | '\t' | '\f' | ('\r'? '\n'))+
   -> skip;

SL_COMMENT
   : '!!'
   (~'@')
   (~('\n'|'\r'|'\uFFFF'))*
   ('\n' | ('\r' ( '\n' )?)|'\uFFFF')
   -> skip
  ;
  
ILI_DOC
    : '/**' .*? '*/' -> skip
    ;

ILI_OPTION
    : '!!@' .*? ('\n' | ('\r' ( '\n' )?)|'\uFFFF') -> skip
    ;
    
ILI_BLOCKCOMMENT
    : '/*' .*? '*/' -> skip
    ;
    
//
// simple tokens
//

MODEL
   : 'MODEL'
   ;

END
   : 'END'
   ;

TOPIC
   : 'TOPIC'
   ;

VIEW
   : 'VIEW'
   ;

DATE
   : 'DATE'
   ;

NO
   : 'NO'
   ;

TEXT
   : 'TEXT'
   ;

LPAREN
   : '('
   ;

RPAREN
   : ')'
   ;

LBRACE
   : '['
   ;

RBRACE
   : ']'
   ;

STAR
   : '*'
   ;

GREATER
   : '>'
   ;

SEMI
   : ';'
   ;

EQUAL
   : '='
   ;

DOT
   : '.'
   ;

DOTDOT
   : '..'
   ;

COLON
   : ':'
   ;

COMMA
   : ','
   ;

LARROW
   : '<-'
   ;

RARROW
   : '->'
   ;
   
HALIGNMENT
   : 'HALIGNMENT'
   ;

VALIGNMENT
   : 'VALIGNMENT'
   ;

UNDEFINED
   : 'UNDEFINED'
   ;
   
BOOLEAN
   : 'BOOLEAN'
   ;
   
ILIDOMAIN
   : 'DOMAIN'
   ;

FORMAT
   : 'FORMAT'
   ;

COORD
   : 'COORD'
   ;
   
ANY
   : 'ANY'
   ;

POLYLINE
   : 'POLYLINE'
   ;
   
SURFACE
   : 'SURFACE'
   ;
   
AREA
   : 'AREA'
   ;

WITH
   : 'WITH'
   ;

STRAIGHTS
   : 'STRAIGHTS'
   ;
   
ARCS
   : 'ARCS'
   ;
   
VERTEX
   : 'VERTEX'
   ;
   
WITHOUT
   : 'WITHOUT'
   ;
   
OVERLAPS
   : 'OVERLAPS'
   ;
   
FORM
   : 'FORM'
   ;
   
BASE
   : 'BASE'
   ;

TRANSFER
   : 'TRANSFER'
   ;
   
OPTIONAL
   : 'OPTIONAL'
   ;
   
TABLE
   : 'TABLE'
   ;
   
IDENT
   : 'IDENT'
   ;
   
COORD2
   : 'COORD2'
   ;
   
COORD3
   : 'COORD3'
   ;
   
DIM1
   : 'DIM1'
   ;
   
DIM2
   : 'DIM2'
   ;
   
RADIANS
   : 'RADIANS'
   ;
   
DEGREES
   : 'DEGREES'
   ;
   
GRADS
   : 'GRADS'
   ;
   
LINEATTR
   : 'LINEATTR'
   ;
   
DERIVATIVES
   : 'DERIVATIVES'
   ;
   
VERTEXINFO
   : 'VERTEXINFO'
   ;
   
PERIPHERY
   : 'PERIPHERY'
   ;
   
CONTOUR
   : 'CONTOUR'
   ;
   
FREE
   : 'FREE'
   ;
   
FIX
   : 'FIX'
   ;
   
LINESIZE
   : 'LINESIZE'
   ;
   
TIDSIZE
   : 'TIDSIZE'
   ;
   
CODE
   : 'CODE'
   ;
   
FONT
   : 'FONT'
   ;
   
BLANK
   : 'BLANK'
   ;
   
DEFAULT
   : 'DEFAULT'
   ;
   
CONTINUE
   : 'CONTINUE'
   ;
   
TID
   : 'TID'
   ;
   
I16
   : 'I16'
   ;
   
I32
   : 'I32'
   ;
   
//
// complex tokens
//

EXPLANATION
    : '//' .*? '//'
    ;

ESC
   : '\\' ( '"' | '\\' | 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT )
   ;

STRING
   : '"' ( ESC | ~('"' | '\\'))* '"'
   ;

fragment DIGIT
   : '0' .. '9'
   ;

fragment LETTER
   :   'a' .. 'z' | 'A' .. 'Z'
   ;

POSNUMBER
   : (DIGIT)+
   ;

NUMBER
   : ('+'|'-')? POSNUMBER
   ;

DEC
   : NUMBER DOT POSNUMBER SCALING?
   ;

SCALING
   : ('E'|'e') NUMBER
   ;

DECIMAL
   : (('+' |'-')? '0' DOT (('1'..'9' (POSNUMBER)?)
   | ('0')+) ('e' | 'E'))
   | NUMBER (DOT POSNUMBER)?
   ;      

fragment HEXDIGIT
   : DIGIT
   | [a-f]
   | [A-F]
   ;

HEXNUMBER
   : '0' ('x' | 'X') (HEXDIGIT)+
   ;

NAME
   : LETTER (LETTER | '_' | DIGIT)*
   ;

ERRORCHAR
   : .
   ;